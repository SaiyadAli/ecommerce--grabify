<%- include('../partials/header.ejs') %>
<%- include('../partials/navbar.ejs') %>
<%- include('../partials/topnavigation.ejs') %>
      

       
<div class="container-fluid">
    <!-- Title -->
    <div class="d-flex justify-content-between align-items-center py-3">
      <h2 class="h5">Customers</h2>
    </div>
  
    <!-- Table -->
    <div class="card mb-4">
      <div class="card-body">
        <table class="table table-striped align-middle datatables">
          <thead>
            <tr>
              <th>Name</th>
              <th>Country</th>
              <th>Email</th>
              <th>State</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% 
  const colorClasses = ['bg-primary', 'bg-success', 'bg-danger', 'bg-warning', 'bg-info'];
             %>
            <% users.forEach(user => {
   const randomColorClass = colorClasses[Math.floor(Math.random() * colorClasses.length)];            
              %>
              <tr>
                <td>
                  <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                      <span class="text-uppercase avatar avatar-sm avatar-text rounded-circle <%= randomColorClass %>"><%= user.username.substring(0, 2).toUpperCase() %></span>
                    </div>
                    <div class="flex-lg-grow-1 ms-3">
                      <h6 class="mb-0"><%= user.username %></h6>
                    </div>
                  </div>
                </td>
                
                <td><%= user.addresses && user.addresses.length > 0 ? user.addresses[0].country : 'N/A' %></td>
                <td><%= user.email %></td>
                <td><%= user.addresses && user.addresses.length > 0 ? user.addresses[0].state : 'N/A' %></td>
                <td><span class="badge rounded-pill <%= user.isBlock ? 'bg-danger' : 'bg-success' %>">
                  <%= user.isBlock ? 'Blocked' : 'Live' %>
                </span></td>
                <td>
                  <button  class="btn btn-sm btn-link text-dark px-2 edit-status-btn" data-user-id="<%= user._id %>"> <i class="bi bi-pencil-square"></i></button>
                  <button class="btn btn-sm btn-link text-danger px-2 delete-user-btn" data-user-id="<%= user._id %>">
                     <i class="bi bi-trash"></i>
                  </button>
                </td>
              </tr>
            <% }); %>
          </tbody>
          
          
        </table>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Add event listeners to all delete buttons
    const deleteButtons = document.querySelectorAll('.delete-user-btn');

    deleteButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();

        const userId = button.getAttribute('data-user-id');

        // SweetAlert confirmation
        const confirmDelete = await Swal.fire({
          title: 'Are you sure?',
          text: 'This action cannot be undone.',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, delete it!',
          cancelButtonText: 'Cancel',
        });

        if (!confirmDelete.isConfirmed) return;

        try {
          const response = await fetch(`/admin/delete-user/${userId}`, {
            method: 'DELETE',
          });

          if (response.ok) {
            Swal.fire({
              title: 'Deleted!',
              text: 'User has been deleted successfully.',
              icon: 'success',
            });
            // Dynamically remove the row
            button.closest('tr').remove();
          } else {
            Swal.fire({
              title: 'Error!',
              text: 'Failed to delete the user.',
              icon: 'error',
            });
          }
        } catch (error) {
          console.error('Error deleting user:', error);
          Swal.fire({
            title: 'Error!',
            text: 'An error occurred while deleting the user.',
            icon: 'error',
          });
        }
      });
    });

    // Add event listeners to all edit buttons
    const editButtons = document.querySelectorAll('.edit-status-btn');

    editButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();

        const userId = button.getAttribute('data-user-id');

        // SweetAlert confirmation
        const confirmEdit = await Swal.fire({
          title: 'Are you sure?',
          text: 'Do you want to change the user\'s status?',
          icon: 'question',
          showCancelButton: true,
          confirmButtonText: 'change!',
          cancelButtonText: 'Cancel',
        });

        if (!confirmEdit.isConfirmed) return;

        try {
          const response = await fetch(`/admin/edit-status/${userId}`, {
            method: 'PUT',
          });

          if (response.ok) {
            const data = await response.json();
            // Swal.fire({
            //   title: 'Success!',
            //   text: data.message,
            //   icon: 'success',
            // });
            // Optionally reload the page or dynamically update status
            location.reload();
          } else {
            const error = await response.json();
            Swal.fire({
              title: 'Error!',
              text: `Failed to update status: ${error.message}`,
              icon: 'error',
            });
          }
        } catch (error) {
          console.error('Error updating status:', error);
          Swal.fire({
            title: 'Error!',
            text: 'An error occurred while updating the status.',
            icon: 'error',
          });
        }
      });
    });
  });
</script>


        
        
          
 <%- include('../partials/footer.ejs') %>