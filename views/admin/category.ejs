<%- include('../partials/header.ejs') %>
<%- include('../partials/navbar.ejs') %>
<%- include('../partials/topnavigation.ejs') %>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1/dist/sweetalert2.all.min.js"></script>     
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>      

<div class="container-fluid">
    <!-- Title -->
    <div class="d-flex justify-content-between align-items-center py-3">
      <h2 class="h5">Categories</h2>
      <button class="btn btn-primary btn-sm btn-icon-text" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
        <i class="bi bi-plus"></i> <span class="text">Add Category</span>
      </button>
    </div>
  
    <!-- Table -->
    <div class="card mb-4">
      <div class="card-body">
        <table class="table table-striped align-middle datatables">
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% categories.forEach(category => { %>
            <tr>
              <td><%= category.categoryName %></td>
              <td><%= category.categoryDescription %></td>
              <td>
                
                <span 
  class="badge rounded-pill <%= category.isListed ? 'bg-success' : 'bg-danger' %>" 
  id="status-<%= category._id %>"
  data-category-id="<%= category._id %>"
  style="cursor: pointer;">
    <%= category.isListed ? 'Listed' : 'Not Listed' %>
</span>

              </td>
              <td>
                <button  class="btn btn-sm btn-link text-dark px-2 edit-status-btn"  data-category-id="<%= category._id %>"  data-category-name="<%= category.categoryName %>" data-category-description="<%= category.categoryDescription %>"  data-category-is-listed="<%= category.isListed %>" ><i class="bi bi-pencil-square"></i></button>
                
                <button class="btn btn-sm btn-link text-danger px-2 delete-category-btn" data-category-id="<%= category._id %>"><i class="bi bi-trash"></i></button>

              </td>
            </tr>
            <% }); %>
          </tbody>
        </table>
      </div>
    </div>
  
  <!-- Add Category Modal -->
<div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered"> <!-- Add modal-dialog-centered here -->
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addCategoryModalLabel">Add Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="addCategoryForm">
          <div class="modal-body">
            <div class="mb-3">
              <label for="categoryName" class="form-label">Category Name</label>
              <input type="text" class="form-control" id="categoryName" name="categoryName" required>
            </div>
            <div class="mb-3">
              <label for="categoryDescription" class="form-label">Category Description</label>
              <textarea class="form-control" id="categoryDescription" name="categoryDescription" rows="3" required></textarea>
            </div>
            <input type="hidden" name="isListed" value="true">
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Add Category</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  
 <!-- Edit Category Modal -->
<div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <form id="editCategoryForm">
          <div class="modal-body">
            <input type="hidden" id="editCategoryId" name="categoryId">
            <div class="mb-3">
              <label for="editCategoryName" class="form-label">Category Name</label>
              <input type="text" class="form-control" id="editCategoryName" name="categoryName" required>
            </div>
            <div class="mb-3">
              <label for="editCategoryDescription" class="form-label">Category Description</label>
              <textarea class="form-control" id="editCategoryDescription" name="categoryDescription" rows="3" required></textarea>
            </div>
            <input type="hidden" id="editCategoryIsListed" name="isListed" value="true">
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>
     


  </div>
  
  <!-- Include Bootstrap JS -->
 
  
  <script>
    //handle editing of category
    document.querySelectorAll('.edit-status-btn').forEach((button) => {
  button.addEventListener('click', (e) => {
    // Get category details from data attributes
    const categoryId = button.getAttribute('data-category-id');
    const categoryName = button.getAttribute('data-category-name');
    const categoryDescription = button.getAttribute('data-category-description');
    const isListed = button.getAttribute('data-category-is-listed') === 'true';

    // Populate the modal fields
    document.getElementById('editCategoryId').value = categoryId;
    document.getElementById('editCategoryName').value = categoryName;
    document.getElementById('editCategoryDescription').value = categoryDescription;
    document.getElementById('editCategoryIsListed').value = isListed;

    // Show the modal
    new bootstrap.Modal(document.getElementById('editCategoryModal')).show();
  });
});


document.getElementById('editCategoryForm').addEventListener('submit', async (e) => {
  e.preventDefault();

  const formData = new FormData(e.target);
  const formObject = Object.fromEntries(formData.entries());

  try {
    const response = await fetch('/admin/categories/edit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formObject),
    });

    const result = await response.json();

    if (result.success) {
      Swal.fire('Success!', 'Category updated successfully!', 'success').then(() => {
        location.reload();
      });
    } else {
      Swal.fire('Error!', result.message || 'Failed to update category.', 'error');
    }
  } catch (error) {
    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
  }
});

    // Handle the Add Category form submission
    document.getElementById('addCategoryForm').addEventListener('submit', async (e) => {
  e.preventDefault();

  const formData = new FormData(e.target);
  const formObject = Object.fromEntries(formData.entries());

  try {
    const response = await fetch('/admin/categories/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formObject),
    });

    const result = await response.json();

    if (result.success) {
      Swal.fire('Success!', 'Category added successfully!', 'success').then(() => {
        location.reload();
      });
    } else {
      Swal.fire('Error!', result.message || 'Failed to add category.', 'error');
    }
  } catch (error) {
    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
  }
});

  </script>
  
  

  
  <script>
    // Handle the status toggle when the status badge is clicked
    document.querySelectorAll('.badge').forEach(badge => {
      badge.addEventListener('click', function() {
        const categoryId = this.id.split('-')[1];  // Extract category ID from the badge's ID
        const statusElement = this;
  
        // Ask for confirmation with SweetAlert2
        Swal.fire({
          title: 'Are you sure?',
          text: 'Do you want to change the status of this category?',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, change it!',
          cancelButtonText: 'No, keep it',
        }).then(async (result) => {
          if (result.isConfirmed) {
            // Send AJAX request to change the status
            try {
              const response = await fetch(`/admin/categories/toggle-status/${categoryId}`);
              const data = await response.json();
  
              if (data.success) {
                // Update the status badge based on the response
                statusElement.textContent = data.isListed ? 'Listed' : 'Not Listed';
                statusElement.className = `badge rounded-pill ${data.isListed ? 'bg-success' : 'bg-danger'}`;
                Swal.fire('Updated!', 'The category status has been changed.', 'success');
              } else {
                Swal.fire('Error!', 'There was an error updating the status.', 'error');
              }
            } catch (error) {
              Swal.fire('Error!', 'An unexpected error occurred.', 'error');
            }
          }
        });
      });
    });
  </script>
  
  <script>
    // Attach event listeners to delete buttons
    document.querySelectorAll('.delete-category-btn').forEach((button) => {
      button.addEventListener('click', async (e) => {
        const categoryId = button.getAttribute('data-category-id');
  
        // Confirmation dialog using SweetAlert
        const confirmation = await Swal.fire({
          title: 'Are you sure?',
          text: "This action cannot be undone!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Yes, delete it!'
        });
  
        if (confirmation.isConfirmed) {
          try {
            // Send DELETE request
            const response = await fetch(`/admin/categories/delete/${categoryId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
            });
  
            const result = await response.json();
  
            if (result.success) {
              Swal.fire('Deleted!', 'Category has been deleted.', 'success').then(() => {
                location.reload(); // Reload the page to reflect changes
              });
            } else {
              Swal.fire('Error!', result.message || 'Failed to delete category.', 'error');
            }
          } catch (error) {
            Swal.fire('Error!', 'An unexpected error occurred.', 'error');
          }
        }
      });
    });
  </script>
    
  
  
 
        
        
          
 <%- include('../partials/footer.ejs') %>
