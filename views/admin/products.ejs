<%- include('../partials/header.ejs') %>
<%- include('../partials/navbar.ejs') %>
<%- include('../partials/topnavigation.ejs') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1/dist/sweetalert2.all.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.1/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<div class="container-fluid">
    <!-- Title -->
    <div class="d-flex justify-content-between align-items-center py-3">
        <h2 class="h5">Products</h2>
        <button class="btn btn-primary btn-sm btn-icon-text" data-bs-toggle="modal" data-bs-target="#addProductModal">
            <i class="bi bi-plus"></i> <span class="text">Add Product</span>
        </button>
    </div>

    <!-- Table -->
    <div class="card mb-4">
        <div class="card-body">
            <table class="table table-striped align-middle datatables">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Category</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% products.forEach(product => { %>
                    <tr>
                        <td><%= product.name %></td>
                        <td><%= product.description %></td>
                        <td><%= product.categoryid ? product.categoryid.categoryName : 'No Category' %></td>
                        <td>
                            <span 
                                class="badge rounded-pill <%= product.isListed ? 'bg-success' : 'bg-danger' %>" 
                                id="status-<%= product._id %>" 
                                data-product-id="<%= product._id %>" 
                                style="cursor: pointer;">
                                <%= product.isListed ? 'Listed' : 'Not Listed' %>
                            </span>
                        </td>
                        
                        <td>
                            <button class="btn btn-sm btn-link text-dark px-2 edit-status-btn" 
                                data-product-id="<%= product._id %>" 
                                data-product-name="<%= product.name %>" 
                                data-product-description="<%= product.description %>" 
                                data-product-category="<%= product.categoryid ? product.categoryid._id : '' %>" 
                                data-product-is-listed="<%= product.isListed %>">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button 
                            class="btn btn-sm btn-link text-danger px-2 delete-product-btn" 
                            data-product-id="<%= product._id %>">
                            <i class="bi bi-trash"></i>
                          </button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProductModalLabel">Add Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="addProductForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="productName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="productName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="productDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="productDescription" name="description" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="productCategory" class="form-label">Category</label>
                            <select class="form-control" id="productCategory" name="categoryid" required>
                                <% categories.forEach(category => { %>
                                <option value="<%= category._id %>"><%= category.categoryName %></option>
                                <% }); %>
                            </select>
                        </div>
                        <input type="hidden" name="isListed" value="true">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Add Product</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Product Modal -->
    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Edit Product</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editProductForm">
                    <div class="modal-body">
                        <input type="hidden" id="editProductId" name="productId">
                        <div class="mb-3">
                            <label for="editProductName" class="form-label">Product Name</label>
                            <input type="text" class="form-control" id="editProductName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="editProductDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editProductDescription" name="description" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editProductCategory" class="form-label">Category</label>
                            <select class="form-control" id="editProductCategory" name="categoryid" required>
                                <% categories.forEach(category => { %>
                                <option value="<%= category._id %>"><%= category.categoryName %></option>
                                <% }); %>
                            </select>
                        </div>
                        <input type="hidden" id="editProductIsListed" name="isListed" value="true">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    // Handle editing of product
    document.querySelectorAll('.edit-status-btn').forEach((button) => {
        button.addEventListener('click', () => {
            const productId = button.getAttribute('data-product-id');
            const productName = button.getAttribute('data-product-name');
            const productDescription = button.getAttribute('data-product-description');
            const productCategory = button.getAttribute('data-product-category');
            const isListed = button.getAttribute('data-product-is-listed') === 'true';

            document.getElementById('editProductId').value = productId;
            document.getElementById('editProductName').value = productName;
            document.getElementById('editProductDescription').value = productDescription;
            document.getElementById('editProductCategory').value = productCategory;
            document.getElementById('editProductIsListed').value = isListed;

            new bootstrap.Modal(document.getElementById('editProductModal')).show();
        });
    });

    // Handle add product
    document.getElementById('addProductForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const formObject = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/admin/products/add', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formObject),
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire('Success!', 'Product added successfully!', 'success').then(() => location.reload());
        } else {
            Swal.fire('Error!', result.message || 'Failed to add product.', 'error');
        }
    } catch (error) {
        Swal.fire('Error!', 'An unexpected error occurred.', 'error');
    }
});


    // Handle edit product
    document.getElementById('editProductForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const formObject = Object.fromEntries(formData.entries());

    try {
        const response = await fetch('/admin/products/edit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formObject),
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire('Success!', 'Product updated successfully!', 'success').then(() => location.reload());
        } else {
            Swal.fire('Error!', result.message || 'Failed to update product.', 'error');
        }
    } catch (error) {
        Swal.fire('Error!', 'An unexpected error occurred.', 'error');
    }
});


    // Handle toggle status
    document.querySelectorAll('.badge').forEach((badge) => {
        badge.addEventListener('click', function () {
            const productId = this.id.split('-')[1];
            const statusElement = this;

            Swal.fire({
                title: 'Are you sure?',
                text: 'Do you want to change the status of this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, change it!',
                cancelButtonText: 'No, keep it',
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/admin/products/toggle-status/${productId}`);
                        const data = await response.json();

                        if (data.success) {
                            statusElement.textContent = data.isListed ? 'Listed' : 'Not Listed';
                            statusElement.className = `badge rounded-pill ${data.isListed ? 'bg-success' : 'bg-danger'}`;
                            Swal.fire('Updated!', 'The product status has been changed.', 'success');
                        } else {
                            Swal.fire('Error!', 'There was an error updating the status.', 'error');
                        }
                    } catch (error) {
                        Swal.fire('Error!', 'An unexpected error occurred.', 'error');
                    }
                }
            });
        });
    });


   // Handle delete product
document.querySelectorAll('.delete-product-btn').forEach((button) => {
    button.addEventListener('click', async function () {
        const productId = this.getAttribute('data-product-id');

        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you really want to delete this product?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel',
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/products/delete/${productId}`, {
                        method: 'DELETE',
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire('Deleted!', data.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                } catch (error) {
                    Swal.fire('Error!', 'An unexpected error occurred.', 'error');
                }
            }
        });
    });
});

</script>

<%- include('../partials/footer.ejs') %>
